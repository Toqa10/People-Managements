# -*- coding: utf-8 -*-
"""HR.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BRPDra8Zdc_vshxER2aey6dnJ-HG5b7a
"""
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from io import BytesIO

# تحميل البيانات
@st.cache_data
def load_data():
    employee = pd.read_csv("employee.csv")
    department = pd.read_csv("department.csv")
    salary = pd.read_csv("salary.csv")
    title = pd.read_csv("title.csv")
    return employee, department, salary, title

employee, department, salary, title = load_data()

# دمج البيانات
df = employee.merge(department, on='dept_id', how='left')\
             .merge(salary, on='emp_id', how='left')\
             .merge(title, on='emp_id', how='left')

# تهيئة الصفحة
st.set_page_config(page_title="HR Analytics", layout="wide")

# CSS لتجميل الواجهة
st.markdown("""
<style>
h1, h2, h3 {
    color: #0E4D92;
    text-align: center;
}
.stButton button {
    background-color: #0E4D92;
    color: white;
    font-weight: bold;
    border-radius: 10px;
}
input[type="text"] {
    border: 2px solid #0E4D92;
    border-radius: 8px;
}
.chart-container {
    text-align: center;
    padding: 10px;
}
.explanation {
    color: #333;
    font-size: 15px;
    text-align: center;
    margin-bottom: 30px;
}
</style>
""", unsafe_allow_html=True)

st.title("📊 HR Analytics Dashboard")

# إدخال السؤال
col1, col2 = st.columns([4, 1])
with col1:
    user_question = st.text_input("اكتب سؤالك هنا (مثال: توزيع الوظائف حسب النوع)", key="input_text")
with col2:
    submit = st.button("✅ Submit")
clear = st.button("🗑️ Clear")

if clear:
    st.experimental_rerun()

def download_button(fig, filename):
    buf = BytesIO()
    fig.savefig(buf, format="png")
    st.download_button("📥 تحميل الصورة", data=buf.getvalue(), file_name=filename, mime="image/png")

# رسم الرسومات والتحليلات
if submit and user_question:
    matched = False

    def show_chart(fig, explanation):
        st.pyplot(fig)
        st.markdown(f'<div class="explanation">{explanation}</div>', unsafe_allow_html=True)
        download_button(fig, "chart.png")

    # 1. توزيع الوظائف حسب النوع
    if "توزيع الوظائف حسب النوع" in user_question:
        matched = True
        fig, ax = plt.subplots()
        sns.countplot(data=df, x='gender', hue='job_title', ax=ax)
        ax.set_title("توزيع الوظائف حسب النوع")
        show_chart(fig, "يوضح هذا الرسم توزيع المسميات الوظيفية حسب الجنس.")

    # 2. الوقت منذ آخر ترقية حسب القسم
    elif "الوقت منذ آخر ترقية" in user_question:
        matched = True
        df['last_promotion_year'] = pd.to_datetime(df['last_promotion_date']).dt.year
        df['years_since_promotion'] = 2025 - df['last_promotion_year']
        avg_promotion = df.groupby('dept_name')['years_since_promotion'].mean().sort_values()
        fig, ax = plt.subplots()
        avg_promotion.plot(kind='barh', ax=ax, color='skyblue')
        ax.set_title("متوسط عدد السنوات منذ آخر ترقية حسب القسم")
        show_chart(fig, "يوضح هذا الرسم عدد السنوات التي مرت منذ آخر ترقية للموظفين في كل قسم.")

    # 3. الفجوة في الرواتب بين الجنسين
    elif "الفجوة في الرواتب" in user_question or "الراتب حسب الجنس" in user_question:
        matched = True
        avg_salary = df.groupby('gender')['salary'].mean()
        fig, ax = plt.subplots()
        avg_salary.plot(kind='bar', color=['#FF69B4', '#00BFFF'], ax=ax)
        ax.set_title("متوسط الرواتب حسب الجنس")
        show_chart(fig, "يوضح هذا الرسم الفجوة المحتملة في الرواتب بين الذكور والإناث.")

    # 4. استقرار الموظفين في الأقسام
    elif "استقرار" in user_question or "الاستقرار الوظيفي" in user_question:
        matched = True
        df['tenure'] = pd.to_datetime(df['exit_date'].fillna('2025'))\
                        .dt.year - pd.to_datetime(df['hire_date']).dt.year
        avg_tenure = df.groupby('dept_name')['tenure'].mean().sort_values()
        fig, ax = plt.subplots()
        avg_tenure.plot(kind='barh', ax=ax, color='lightgreen')
        ax.set_title("متوسط مدة بقاء الموظف في كل قسم")
        show_chart(fig, "يوضح هذا الرسم مدى استقرار الموظفين داخل كل قسم.")

    # 5. الترقيات حسب النوع
    elif "الترقيات حسب النوع" in user_question or "الترقيات بين الذكور والإناث" in user_question:
        matched = True
        df['was_promoted'] = df['last_promotion_date'].notna()
        promotions_by_gender = df.groupby('gender')['was_promoted'].mean()
        fig, ax = plt.subplots()
        promotions_by_gender.plot(kind='bar', color=['#FF69B4', '#00BFFF'], ax=ax)
        ax.set_title("نسبة الترقيات حسب النوع")
        show_chart(fig, "يوضح هذا الرسم ما إذا كان هناك تفاوت في الترقيات بين الذكور والإناث.")

    # 6. الرواتب حسب الأقسام
    elif "الرواتب حسب القسم" in user_question or "متوسط الرواتب حسب القسم" in user_question:
        matched = True
        avg_salary_dept = df.groupby('dept_name')['salary'].mean().sort_values()
        fig, ax = plt.subplots()
        avg_salary_dept.plot(kind='barh', ax=ax, color='orange')
        ax.set_title("متوسط الرواتب حسب القسم")
        show_chart(fig, "يوضح هذا الرسم مقارنة الرواتب بين الأقسام المختلفة.")

    if not matched:
        st.warning("❌ هذا السؤال غير مدعوم حاليًا أو البيانات المطلوبة غير متاحة.")

