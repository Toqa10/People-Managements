# -*- coding: utf-8 -*-
"""HR.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BRPDra8Zdc_vshxER2aey6dnJ-HG5b7a
"""

# Commented out IPython magic to ensure Python compatibility.
# import streamlit as st
# import pandas as pd
# import joblib
# 
# # تحميل الموديل المدرب
# model = joblib.load('risk_model.pkl')
# 
# # عنوان التطبيق
# st.title("🎯 Employee Risk Prediction App")
# 
# st.write("Upload employee data to predict their risk score.")
# 
# # تحميل البيانات من المستخدم
# uploaded_file = st.file_uploader("📤 Upload a CSV file", type=["csv"])
# 
# if uploaded_file is not None:
#     data = pd.read_csv(uploaded_file)
#     st.write("✅ Uploaded Data Preview:")
#     st.write(data.head())
# 
#     # تحديد الأعمدة المطلوبة
#     expected_cols = ['gender', 'title', 'dept_name', 'tenure', 'amount', 'num_promotions']
# 
#     # التحقق إن كل الأعمدة موجودة
#     if all(col in data.columns for col in expected_cols):
#         # التأكد من الترتيب
#         input_data = data[expected_cols]
# 
#         # التعامل مع الترميز (لو دربتي الموديل على بيانات مش مرمزة قوليلي)
#         # هنا بنفترض الترميز في مرحلة التدريب
# 
#         # التنبؤ
#         predictions = model.predict(input_data)
# 
#         # عرض النتائج
#         data['Predicted Risk'] = predictions
#         st.success("✅ Predictions completed!")
#         st.write(data)
# 
#         # تحميل النتائج
#         csv = data.to_csv(index=False)
#         st.download_button("⬇️ Download Results as CSV", data=csv, file_name="risk_predictions.csv", mime="text/csv")
#     else:
#         st.error("❌ Please upload a CSV file with the correct columns: " + ", ".join(expected_cols))
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import joblib
# 
# df = pd.read_csv("employee.csv")
# 
# model = joblib.load("rf_model.pkl")
# 
# st.title("🚨 HR Risk Prediction App")
# 
# row = st.selectbox("اختر رقم الموظف للتنبؤ بالمخاطر", df.index)
# 
# if st.button("تنبأ"):
#     input_data = df.drop(columns=["risk_score"]).iloc[[row]]
#     prediction = model.predict(input_data)[0]
#     st.success(f"تقييم المخاطر المتوقع: {prediction}")
#
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

st.set_page_config(page_title="Employee Insights Chat", layout="wide")
st.title("💬 Ask About Employee Data")

# ✨ Suggested questions (with buttons)
example_questions = [
    "top salaries",
    "top 10 departments with avg salary",
    "top department",
    "average salary per year",
    "salary growth",
    "most common age group",
    "turnover",
    "tenure vs salary",
    "total salary",
    "salary overall distribution",
    "average salary per title",
    "gender salary",
    "employee distribution by title",
    "department switch"
]

with st.expander("💡 Suggested Questions (Click to autofill)"):
    cols = st.columns(3)
    for i, question in enumerate(example_questions):
        if cols[i % 3].button(question):
            st.session_state["auto_question"] = question

# --- Question input ---
question = st.text_input("❓ Type your question here:", value=st.session_state.get("auto_question", ""))
st.session_state["auto_question"] = ""  # Reset after use

@st.cache_data
def load_data():
    current_emp_snapchat = pd.read_csv("current_employee_snapshot.csv")
    department_employee = pd.read_csv("department_employee.csv")
    employee = pd.read_csv("employee.csv")
    department = pd.read_csv("department.csv")
    salary = pd.read_csv("salary_sample.csv")  # استخدمي النسخة المصغرة هنا
    title = pd.read_csv("title.csv")
    department_manager = pd.read_csv("department_manager.csv")
    return current_emp_snapchat, department_employee, employee, department, salary, title, department_manager

# Load data
current_emp_snapchat, department_employee, employee, department, salary, title, department_manager = load_data()

# ✂️ باقي الكود زي ما كتبتيه انتِ بنفس ترتيب الشارتات والأسئلة في if-elif...

# بعد كل شروط السؤال بنهاية الكود، خليه زي ما هو:

else:
    st.warning("⚠️ Your question was not recognized. Try a different phrasing.")

# --- Input for employee ID to show salary trend ---
st.markdown("---")
employee_id_input = st.text_input("🔍 Enter employee ID to see salary progression:")

if employee_id_input:
    try:
        emp_id = int(employee_id_input)
        salary['from_date'] = pd.to_datetime(salary['from_date'])
        salary['year'] = salary['from_date'].dt.year
        salary = salary.sort_values(by=['employee_id', 'from_date'])
        salary['salary_growth'] = salary.groupby('employee_id')['amount'].diff()

        emp_salary = salary[salary["employee_id"] == emp_id]

        if not emp_salary.empty:
            st.write(f"📈 Salary progression for employee ID {emp_id}:")
            st.dataframe(emp_salary[["from_date", "amount", "salary_growth"]])

            fig, ax = plt.subplots()
            ax.plot(emp_salary["from_date"], emp_salary["amount"], marker='o', label='Salary')
            ax.set_title(f'Salary Over Time for Employee {emp_id}')
            ax.set_xlabel('Date')
            ax.set_ylabel('Salary')
            ax.grid(True)
            st.pyplot(fig)
        else:
            st.warning("❌ No data found for this employee.")
    except ValueError:
        st.warning("⚠️ Please enter a valid numeric employee ID.")

        st.warning("Please enter a valid numeric ID.")
