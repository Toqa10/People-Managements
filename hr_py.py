# -*- coding: utf-8 -*-
"""HR.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BRPDra8Zdc_vshxER2aey6dnJ-HG5b7a
"""
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from io import BytesIO
import base64

st.set_page_config(page_title="HR Analytics App", layout="wide")

# ==== Apply Custom CSS ====
st.markdown("""
    <style>
    body {
        background-color: #f8f9fa;
    }
    .title {
        text-align: center;
        font-size: 36px;
        color: #343a40;
        font-weight: bold;
        margin-bottom: 20px;
    }
    .explanation {
        text-align: center;
        font-size: 16px;
        color: #6c757d;
        margin-top: -10px;
        margin-bottom: 30px;
    }
    .stButton button {
        background-color: #4CAF50;
        color: white;
        border-radius: 10px;
        height: 3em;
        width: 8em;
        font-size: 16px;
    }
    .stTextInput > div > div > input {
        font-size: 18px;
    }
    </style>
""", unsafe_allow_html=True)

# ==== Load Data ====
@st.cache_data
def load_data():
    emp = pd.read_csv("employee.csv")
    dept = pd.read_csv("department.csv")
    sal = pd.read_csv("salary.csv")
    titles = pd.read_csv("title.csv")
    return emp, dept, sal, titles

emp, dept, sal, titles = load_data()

# ==== Helper Functions ====
def save_chart(fig):
    buf = BytesIO()
    fig.savefig(buf, format="png")
    buf.seek(0)
    b64 = base64.b64encode(buf.read()).decode()
    href = f'<a href="data:image/png;base64,{b64}" download="chart.png">📥 Download Chart</a>'
    return href

def center_text(text, size="24px", color="#343a40"):
    st.markdown(f"<h3 style='text-align: center; color:{color}; font-size:{size}'>{text}</h3>", unsafe_allow_html=True)

# ==== UI ====
st.markdown("<div class='title'>💼 HR Analytics Dashboard</div>", unsafe_allow_html=True)
st.markdown("<div class='explanation'>Ask a question about your employees, salaries, or departments to generate insights!</div>", unsafe_allow_html=True)

col1, col2 = st.columns([5, 1])
with col1:
    user_input = st.text_input("💬 Enter your question:", key="input_question")
with col2:
    submit = st.button("Submit", use_container_width=True)
    clear = st.button("Clear", use_container_width=True)

if clear:
    st.session_state.input_question = ""
    st.experimental_rerun()

# ==== Answer Questions ====
if submit and user_input:
    question = user_input.lower()

    # 1. Gender job distribution
    if "gender" in question and ("job" in question or "title" in question or "position" in question):
        center_text("👩‍💼 Gender Distribution by Job Title")
        merged = pd.merge(emp, titles, on="emp_id")
        fig, ax = plt.subplots(figsize=(10, 5))
        sns.countplot(data=merged, x="title", hue="gender", ax=ax)
        plt.xticks(rotation=45)
        st.pyplot(fig)
        st.markdown("🔍 **Explanation:** This chart shows how different genders are distributed across job roles.")
        st.markdown(save_chart(fig), unsafe_allow_html=True)

    # 2. Time since last promotion
    elif "last promotion" in question:
        center_text("📈 Time Since Last Promotion Distribution")
        if "last_promotion_date" in emp.columns:
            emp['last_promotion_date'] = pd.to_datetime(emp['last_promotion_date'])
            emp['years_since_promo'] = (pd.Timestamp.today() - emp['last_promotion_date']).dt.days / 365
            fig, ax = plt.subplots(figsize=(10, 5))
            sns.histplot(emp['years_since_promo'], bins=20, kde=True, ax=ax)
            st.pyplot(fig)
            st.markdown("🔍 **Explanation:** This histogram shows how long it has been since employees were last promoted.")
            st.markdown(save_chart(fig), unsafe_allow_html=True)
        else:
            st.error("❌ No column found for last_promotion_date in employee data.")

    # 3. Stable departments (least turnover)
    elif "stable" in question or ("low" in question and "turnover" in question):
        center_text("🏢 Most Stable Departments (Low Turnover)")
        turnover_rate = emp.groupby("department_id")["left"].mean()
        stable = turnover_rate.sort_values().head(5)
        merged = pd.merge(stable.reset_index(), dept, on="department_id")
        fig, ax = plt.subplots()
        sns.barplot(x="department_name", y="left", data=merged, ax=ax)
        plt.ylabel("Turnover Rate")
        st.pyplot(fig)
        st.markdown("🔍 **Explanation:** These departments have the lowest turnover rates, indicating higher stability.")
        st.markdown(save_chart(fig), unsafe_allow_html=True)

    # 4. Salary gap by gender
    elif "salary" in question and "gender" in question:
        center_text("💰 Gender Pay Gap by Job Title")
        merged = pd.merge(emp, sal, on="emp_id")
        merged = pd.merge(merged, titles, on="emp_id")
        fig, ax = plt.subplots(figsize=(10, 5))
        sns.barplot(data=merged, x="title", y="salary", hue="gender", ci=None, ax=ax)
        plt.xticks(rotation=45)
        st.pyplot(fig)
        st.markdown("🔍 **Explanation:** This compares average salaries of males and females across roles.")
        st.markdown(save_chart(fig), unsafe_allow_html=True)

    # 5. Promotions per department
    elif "promotion" in question and "department" in question:
        center_text("🏆 Promotions per Department")
        promoted = emp[emp["promoted"] == 1]
        promo_counts = promoted["department_id"].value_counts().reset_index()
        promo_counts.columns = ["department_id", "count"]
        merged = pd.merge(promo_counts, dept, on="department_id")
        fig, ax = plt.subplots()
        sns.barplot(x="department_name", y="count", data=merged, ax=ax)
        st.pyplot(fig)
        st.markdown("🔍 **Explanation:** This chart shows how many employees have been promoted in each department.")
        st.markdown(save_chart(fig), unsafe_allow_html=True)

    # Default
    else:
        st.warning("🚫 This question is not supported or the data required is missing.")
