# -*- coding: utf-8 -*-
"""HR.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BRPDra8Zdc_vshxER2aey6dnJ-HG5b7a
"""

# Commented out IPython magic to ensure Python compatibility.
# import streamlit as st
# import pandas as pd
# import joblib
# 
# # تحميل الموديل المدرب
# model = joblib.load('risk_model.pkl')
# 
# # عنوان التطبيق
# st.title("🎯 Employee Risk Prediction App")
# 
# st.write("Upload employee data to predict their risk score.")
# 
# # تحميل البيانات من المستخدم
# uploaded_file = st.file_uploader("📤 Upload a CSV file", type=["csv"])
# 
# if uploaded_file is not None:
#     data = pd.read_csv(uploaded_file)
#     st.write("✅ Uploaded Data Preview:")
#     st.write(data.head())
# 
#     # تحديد الأعمدة المطلوبة
#     expected_cols = ['gender', 'title', 'dept_name', 'tenure', 'amount', 'num_promotions']
# 
#     # التحقق إن كل الأعمدة موجودة
#     if all(col in data.columns for col in expected_cols):
#         # التأكد من الترتيب
#         input_data = data[expected_cols]
# 
#         # التعامل مع الترميز (لو دربتي الموديل على بيانات مش مرمزة قوليلي)
#         # هنا بنفترض الترميز في مرحلة التدريب
# 
#         # التنبؤ
#         predictions = model.predict(input_data)
# 
#         # عرض النتائج
#         data['Predicted Risk'] = predictions
#         st.success("✅ Predictions completed!")
#         st.write(data)
# 
#         # تحميل النتائج
#         csv = data.to_csv(index=False)
#         st.download_button("⬇️ Download Results as CSV", data=csv, file_name="risk_predictions.csv", mime="text/csv")
#     else:
#         st.error("❌ Please upload a CSV file with the correct columns: " + ", ".join(expected_cols))
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import joblib
# 
# df = pd.read_csv("employee.csv")
# 
# model = joblib.load("rf_model.pkl")
# 
# st.title("🚨 HR Risk Prediction App")
# 
# row = st.selectbox("اختر رقم الموظف للتنبؤ بالمخاطر", df.index)
# 
# if st.button("تنبأ"):
#     input_data = df.drop(columns=["risk_score"]).iloc[[row]]
#     prediction = model.predict(input_data)[0]
#     st.success(f"تقييم المخاطر المتوقع: {prediction}")
#
# --- Streamlit HR Analytics App ---
# --- Streamlit HR Analytics App ---
# --- Streamlit HR Analytics App ---
# --- Streamlit HR Analytics App ---
# --- HR Analytics Streamlit App ---
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import io  # تمت إضافة هذه المكتبة المطلوبة لوظيفة fig_to_image

st.set_page_config(page_title="HR Insights", layout="wide")
sns.set_style("whitegrid")

# --- Load Data ---
@st.cache_data
def load_data():
    def read_file(name):
        try:
            return pd.read_csv(name)
        except FileNotFoundError:
            return pd.DataFrame()

    return (
        read_file("current_employee_snapshot.csv"),
        read_file("department_employee.csv"),
        read_file("employee.csv"),
        read_file("department.csv"),
        read_file("salary.csv"),
        read_file("title.csv"),
        read_file("department_manager.csv"),
    )

current_emp_snapshot, department_employee, employee, department, salary, title, department_manager = load_data()

# --- Preprocessing ---
if not salary.empty:
    salary['year'] = pd.to_datetime(salary['from_date']).dt.year
    salary_sorted = salary.sort_values(['employee_id', 'from_date'])
    salary_sorted['prev_salary'] = salary_sorted.groupby('employee_id')['amount'].shift(1)
    salary_sorted['salary_growth'] = salary_sorted['amount'] - salary_sorted['prev_salary']
    salary_sorted['growth_year'] = pd.to_datetime(salary_sorted['from_date']).dt.year
else:
    salary_sorted = pd.DataFrame()

# Top salaries by department
if not current_emp_snapshot.empty:
    top_10 = current_emp_snapshot.groupby("dept_name", as_index=False).apply(
        lambda x: x.sort_values("salary_amount", ascending=False).head(10)
    ).reset_index(drop=True)
else:
    top_10 = pd.DataFrame()

# --- Helper function for downloading charts ---
def fig_to_image(fig):
    buf = io.BytesIO()
    fig.savefig(buf, format="png", bbox_inches='tight')
    buf.seek(0)
    return buf

# --- App Layout ---
st.title("📊 HR Insights Dashboard")
st.markdown("Ask a question below and get visual insights from employee data.")

question = st.text_input("❓ Ask a question about employee data")

allowed_questions = {
    "top salaries": "Top salaries by department",
    "highest paid": "Top salaries by department",
    "salary growth": "Salary growth per year",
    "average salary per gender": "Average salary per gender",
    "gender salary": "Average salary per gender",
    "tenure vs salary": "Tenure vs Salary"
}

# --- Handle Questions ---
if question:
    q = question.lower()
    matched = [key for key in allowed_questions if key in q]

    if matched:
        chart_title = allowed_questions[matched[0]]
        st.success(f"✅ Showing chart for: {chart_title}")
        fig, ax = plt.subplots(figsize=(10, 5))

        if "salary growth" in matched[0]:
            if not salary_sorted.empty:
                avg_growth = salary_sorted.groupby("growth_year")["salary_growth"].mean().reset_index()
                sns.lineplot(data=avg_growth, x="growth_year", y="salary_growth", marker='o', ax=ax)
                ax.set_title("📈 Average Salary Growth per Year")
                st.pyplot(fig)
                st.caption("This shows how employee salary has increased year over year.")
                st.download_button("⬇️ Download Chart", data=fig_to_image(fig), file_name="salary_growth.png", mime="image/png")

        elif "top salaries" in matched[0] or "highest paid" in matched[0]:
            if not top_10.empty:
                top10_plot = top_10.drop_duplicates(subset=["dept_name"]).sort_values("salary_amount", ascending=False)
                sns.barplot(data=top10_plot, x="dept_name", y="salary_amount", ax=ax)
                ax.set_title("🏆 Highest Paid Employees by Department")
                plt.xticks(rotation=45)
                st.pyplot(fig)
                st.caption("Shows top salary holders in each department.")
                st.download_button("⬇️ Download Chart", data=fig_to_image(fig), file_name="top_salaries.png", mime="image/png")

        elif "gender salary" in matched[0] or "average salary per gender" in matched[0]:
            if not current_emp_snapshot.empty:
                sns.barplot(data=current_emp_snapshot, x="gender", y="salary_amount", estimator='mean', ax=ax)
                ax.set_title("⚖️ Average Salary by Gender")
                st.pyplot(fig)
                st.caption("Displays the average salary comparison between genders.")
                st.download_button("⬇️ Download Chart", data=fig_to_image(fig), file_name="gender_salary.png", mime="image/png")

        elif "tenure vs salary" in matched[0]:
            if not current_emp_snapshot.empty:
                current_emp_snapshot = current_emp_snapshot.dropna(subset=["tenure", "salary_amount"])
                sns.scatterplot(data=current_emp_snapshot, x="tenure", y="salary_amount", ax=ax)
                ax.set_title("📉 Tenure vs Salary")
                st.pyplot(fig)
                st.caption("Examines how employee tenure relates to salary level.")
                st.download_button("⬇️ Download Chart", data=fig_to_image(fig), file_name="tenure_vs_salary.png", mime="image/png")

    else:
        st.warning("🚫 This data is restricted or question is unsupported.")
