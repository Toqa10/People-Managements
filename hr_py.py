# -*- coding: utf-8 -*-
"""HR.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BRPDra8Zdc_vshxER2aey6dnJ-HG5b7a
"""

# Commented out IPython magic to ensure Python compatibility.
# import streamlit as st
# import pandas as pd
# import joblib
# 
# # تحميل الموديل المدرب
# model = joblib.load('risk_model.pkl')
# 
# # عنوان التطبيق
# st.title("🎯 Employee Risk Prediction App")
# 
# st.write("Upload employee data to predict their risk score.")
# 
# # تحميل البيانات من المستخدم
# uploaded_file = st.file_uploader("📤 Upload a CSV file", type=["csv"])
# 
# if uploaded_file is not None:
#     data = pd.read_csv(uploaded_file)
#     st.write("✅ Uploaded Data Preview:")
#     st.write(data.head())
# 
#     # تحديد الأعمدة المطلوبة
#     expected_cols = ['gender', 'title', 'dept_name', 'tenure', 'amount', 'num_promotions']
# 
#     # التحقق إن كل الأعمدة موجودة
#     if all(col in data.columns for col in expected_cols):
#         # التأكد من الترتيب
#         input_data = data[expected_cols]
# 
#         # التعامل مع الترميز (لو دربتي الموديل على بيانات مش مرمزة قوليلي)
#         # هنا بنفترض الترميز في مرحلة التدريب
# 
#         # التنبؤ
#         predictions = model.predict(input_data)
# 
#         # عرض النتائج
#         data['Predicted Risk'] = predictions
#         st.success("✅ Predictions completed!")
#         st.write(data)
# 
#         # تحميل النتائج
#         csv = data.to_csv(index=False)
#         st.download_button("⬇️ Download Results as CSV", data=csv, file_name="risk_predictions.csv", mime="text/csv")
#     else:
#         st.error("❌ Please upload a CSV file with the correct columns: " + ", ".join(expected_cols))
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import joblib
# 
# df = pd.read_csv("employee.csv")
# 
# model = joblib.load("rf_model.pkl")
# 
# st.title("🚨 HR Risk Prediction App")
# 
# row = st.selectbox("اختر رقم الموظف للتنبؤ بالمخاطر", df.index)
# 
# if st.button("تنبأ"):
#     input_data = df.drop(columns=["risk_score"]).iloc[[row]]
#     prediction = model.predict(input_data)[0]
#     st.success(f"تقييم المخاطر المتوقع: {prediction}")
#
# --- Streamlit HR Analytics App ---
# --- Streamlit HR Analytics App ---
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# --- Load Data ---
@st.cache_data
def load_data():
    try:
        current_emp_snapshot = pd.read_csv("current_employee_snapshot.csv")
    except FileNotFoundError:
        current_emp_snapshot = pd.DataFrame()

    try:
        department_employee = pd.read_csv("department_employee.csv")
    except FileNotFoundError:
        department_employee = pd.DataFrame()

    try:
        employee = pd.read_csv("employee.csv")
    except FileNotFoundError:
        employee = pd.DataFrame()

    try:
        department = pd.read_csv("department.csv")
    except FileNotFoundError:
        department = pd.DataFrame()

    try:
        salary = pd.read_csv("salary_sample.csv")
    except FileNotFoundError:
        salary = pd.DataFrame()

    try:
        title = pd.read_csv("title.csv")
    except FileNotFoundError:
        title = pd.DataFrame()

    try:
        department_manager = pd.read_csv("department_manager.csv")
    except FileNotFoundError:
        department_manager = pd.DataFrame()

    return current_emp_snapshot, department_employee, employee, department, salary, title, department_manager

current_emp_snapshot, department_employee, employee, department, salary, title, department_manager = load_data()

# --- Merge for analysis ---
if not salary.empty:
    salary['year'] = pd.to_datetime(salary['from_date']).dt.year
    salary_sorted = salary.sort_values(['employee_id', 'from_date'])
    salary_sorted['prev_salary'] = salary_sorted.groupby('employee_id')['amount'].shift(1)
    salary_sorted['salary_growth'] = salary_sorted['amount'] - salary_sorted['prev_salary']
    salary_sorted['growth_year'] = pd.to_datetime(salary_sorted['from_date']).dt.year
else:
    salary_sorted = pd.DataFrame()

# Merge for tenure/salary analysis
merged = salary.merge(title, on='employee_id') if not salary.empty and not title.empty else pd.DataFrame()

# --- Top 10 highest-paid employees per department ---
if not current_emp_snapshot.empty:
    top_10 = current_emp_snapshot.groupby("dept_name").apply(lambda x: x.sort_values("salary_amount", ascending=False).head(10))
else:
    top_10 = pd.DataFrame()

# --- Sidebar ---
st.title("🧑‍💼 HR Analytics Chat App")
st.sidebar.header("Upload Employee Data to Predict Risk")
st.sidebar.file_uploader("📤 Upload a CSV file", type="csv")
question = st.sidebar.text_input("❓ Ask a question about the data")

# --- Insights Logic ---
allowed_questions = [
    "top salaries", "highest paid", "top 10 departments with avg salary",
    "top department", "highest average", "average salary year",
    "salary growth", "salary change", "age group", "most common age",
    "turnover", "average tenure", "department tenure", "tenure vs salary",
    "total salary", "department spending", "salary distribution",
    "salary overall distribution", "salary histogram", "average salary per title",
    "title salary", "gender salary", "average salary per gender",
    "employee distribution", "title distribution", "department switch",
    "moved departments", "switching departments"
]

if question:
    q = question.lower()

    if any(key in q for key in allowed_questions):
        st.text_input("You asked:", question)
        st.success("✅ Valid question. Check main screen for visual.")
    else:
        st.warning("⚠️ This question is not supported. Please rephrase or ask a different question.")
