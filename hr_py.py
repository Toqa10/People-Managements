# -*- coding: utf-8 -*-
"""HR.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BRPDra8Zdc_vshxER2aey6dnJ-HG5b7a
"""

# Commented out IPython magic to ensure Python compatibility.
# import streamlit as st
# import pandas as pd
# import joblib
# 
# # تحميل الموديل المدرب
# model = joblib.load('risk_model.pkl')
# 
# # عنوان التطبيق
# st.title("🎯 Employee Risk Prediction App")
# 
# st.write("Upload employee data to predict their risk score.")
# 
# # تحميل البيانات من المستخدم
# uploaded_file = st.file_uploader("📤 Upload a CSV file", type=["csv"])
# 
# if uploaded_file is not None:
#     data = pd.read_csv(uploaded_file)
#     st.write("✅ Uploaded Data Preview:")
#     st.write(data.head())
# 
#     # تحديد الأعمدة المطلوبة
#     expected_cols = ['gender', 'title', 'dept_name', 'tenure', 'amount', 'num_promotions']
# 
#     # التحقق إن كل الأعمدة موجودة
#     if all(col in data.columns for col in expected_cols):
#         # التأكد من الترتيب
#         input_data = data[expected_cols]
# 
#         # التعامل مع الترميز (لو دربتي الموديل على بيانات مش مرمزة قوليلي)
#         # هنا بنفترض الترميز في مرحلة التدريب
# 
#         # التنبؤ
#         predictions = model.predict(input_data)
# 
#         # عرض النتائج
#         data['Predicted Risk'] = predictions
#         st.success("✅ Predictions completed!")
#         st.write(data)
# 
#         # تحميل النتائج
#         csv = data.to_csv(index=False)
#         st.download_button("⬇️ Download Results as CSV", data=csv, file_name="risk_predictions.csv", mime="text/csv")
#     else:
#         st.error("❌ Please upload a CSV file with the correct columns: " + ", ".join(expected_cols))
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import joblib
# 
# df = pd.read_csv("employee.csv")
# 
# model = joblib.load("rf_model.pkl")
# 
# st.title("🚨 HR Risk Prediction App")
# 
# row = st.selectbox("اختر رقم الموظف للتنبؤ بالمخاطر", df.index)
# 
# if st.button("تنبأ"):
#     input_data = df.drop(columns=["risk_score"]).iloc[[row]]
#     prediction = model.predict(input_data)[0]
#     st.success(f"تقييم المخاطر المتوقع: {prediction}")
#
# --- Streamlit HR Analytics App ---
# --- Streamlit HR Analytics App ---
# --- Streamlit HR Analytics App ---
# --- Streamlit HR Analytics App ---
# --- HR Analytics Streamlit App ---
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import io

st.set_page_config(page_title="HR Analytics App", layout="wide")

# --- Load Data ---
@st.cache_data
def load_data():
    def read_csv_safe(file_name):
        try:
            return pd.read_csv(file_name)
        except FileNotFoundError:
            return pd.DataFrame()
        
    return (
        read_csv_safe("current_employee_snapshot.csv"),
        read_csv_safe("department_employee.csv"),
        read_csv_safe("employee.csv"),
        read_csv_safe("department.csv"),
        read_csv_safe("salary_sample.csv"),
        read_csv_safe("title.csv"),
        read_csv_safe("department_manager.csv")
    )

# Load datasets
current_emp_snapshot, department_employee, employee, department, salary, title, department_manager = load_data()

# Preprocess salary
if not salary.empty:
    salary['year'] = pd.to_datetime(salary['from_date']).dt.year
    salary_sorted = salary.sort_values(['employee_id', 'from_date'])
    salary_sorted['prev_salary'] = salary_sorted.groupby('employee_id')['amount'].shift(1)
    salary_sorted['salary_growth'] = salary_sorted['amount'] - salary_sorted['prev_salary']
    salary_sorted['growth_year'] = pd.to_datetime(salary_sorted['from_date']).dt.year
else:
    salary_sorted = pd.DataFrame()

# Merge for title-based salary
merged = salary.merge(title, on='employee_id') if not salary.empty and not title.empty else pd.DataFrame()

# Top salaries
if not current_emp_snapshot.empty:
    top_10 = current_emp_snapshot.groupby("dept_name", group_keys=False).apply(
        lambda x: x.sort_values("salary_amount", ascending=False).head(10)
    )
else:
    top_10 = pd.DataFrame()

# --- UI Layout ---
st.title("🧑‍💼 HR Analytics Chat App")
st.sidebar.header("Ask Questions")
questions = st.sidebar.text_area("Type multiple questions (one per line)", height=200)

# --- Supported Questions & Chart Rendering ---
def render_chart(fig, explanation):
    st.pyplot(fig)
    st.caption(f"📌 {explanation}")
    buf = io.BytesIO()
    fig.savefig(buf, format="png")
    st.download_button(
        label="📥 Download Chart as Image",
        data=buf.getvalue(),
        file_name="chart.png",
        mime="image/png"
    )

def handle_question(question):
    q = question.lower().strip()

    if "salary growth" in q and not salary_sorted.empty:
        fig, ax = plt.subplots(figsize=(10, 4))
        sns.lineplot(data=salary_sorted, x="growth_year", y="salary_growth", ax=ax)
        ax.set_title("Average Salary Growth per Year")
        render_chart(fig, "Shows how salary changed over time on average.")

    elif "top salaries" in q or "highest paid" in q and not top_10.empty:
        fig, ax = plt.subplots(figsize=(12, 5))
        top10_plot = top_10.groupby("dept_name", as_index=False).first().sort_values("salary_amount", ascending=False)
        sns.barplot(data=top10_plot, x="dept_name", y="salary_amount", ax=ax)
        ax.set_title("Top Salaries by Department")
        plt.xticks(rotation=45)
        render_chart(fig, "Displays the highest-paid employee in each department.")

    elif "average salary per gender" in q or "gender salary" in q and not current_emp_snapshot.empty:
        fig, ax = plt.subplots()
        sns.barplot(data=current_emp_snapshot, x="gender", y="salary_amount", estimator='mean', ax=ax)
        ax.set_title("Average Salary per Gender")
        render_chart(fig, "Compares average salary between genders.")

    elif "tenure vs salary" in q and not current_emp_snapshot.empty:
        if "tenure" in current_emp_snapshot.columns and "salary_amount" in current_emp_snapshot.columns:
            fig, ax = plt.subplots()
            sns.scatterplot(data=current_emp_snapshot, x="tenure", y="salary_amount", ax=ax)
            ax.set_title("Tenure vs Salary")
            render_chart(fig, "Analyzes the relationship between employee tenure and salary.")

    elif "average salary per title" in q and not merged.empty:
        fig, ax = plt.subplots(figsize=(12, 5))
        avg_title = merged.groupby("title")["amount"].mean().sort_values(ascending=False).reset_index()
        sns.barplot(data=avg_title, x="title", y="amount", ax=ax)
        ax.set_title("Average Salary per Title")
        plt.xticks(rotation=45)
        render_chart(fig, "Displays which job titles earn the highest average salaries.")

    elif "salary distribution" in q and not current_emp_snapshot.empty:
        fig, ax = plt.subplots()
        sns.histplot(current_emp_snapshot["salary_amount"], kde=True, ax=ax)
        ax.set_title("Overall Salary Distribution")
        render_chart(fig, "Visualizes how salaries are distributed across all employees.")

    elif "department spending" in q or "total salary" in q and not current_emp_snapshot.empty:
        fig, ax = plt.subplots(figsize=(12, 5))
        dept_salary = current_emp_snapshot.groupby("dept_name")["salary_amount"].sum().sort_values(ascending=False).reset_index()
        sns.barplot(data=dept_salary, x="dept_name", y="salary_amount", ax=ax)
        ax.set_title("Total Salary Spending per Department")
        plt.xticks(rotation=45)
        render_chart(fig, "Shows which departments have the highest total salary expenditures.")

    else:
        st.warning(f"⚠️ Unsupported or missing data for: '{question}'")

# --- Process Questions ---
if questions:
    for question in questions.strip().splitlines():
        if question.strip():
            st.markdown(f"### 🔍 {question.strip()}")
            handle_question(question.strip())
            st.markdown("---")
else:
    st.info("📝 Enter one or more questions in the sidebar to get started.")

# --- Footer ---
st.markdown(
    """
    <hr style='margin-top: 40px;'>
    <center><sub>Developed with ❤️ for HR insights</sub></center>
    """, unsafe_allow_html=True
)








