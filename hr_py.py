# -*- coding: utf-8 -*-
"""HR.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BRPDra8Zdc_vshxER2aey6dnJ-HG5b7a
"""
import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from io import BytesIO
import base64

# ===================== #
# 1. Load Data
# ===================== #
@st.cache_data
def load_data():
    employee = pd.read_csv("employee.csv")
    salary = pd.read_csv("salary.csv")
    title = pd.read_csv("title.csv")
    department = pd.read_csv("department.csv")
    dept_emp = pd.read_csv("department_employee.csv")
    return employee, salary, title, department, dept_emp

employee, salary, title, department, dept_emp = load_data()

# ===================== #
# 2. Helper to download charts
# ===================== #
def get_image_download_link(fig):
    buffer = BytesIO()
    fig.savefig(buffer, format='png')
    buffer.seek(0)
    b64 = base64.b64encode(buffer.read()).decode()
    href = f'<a href="data:file/png;base64,{b64}" download="chart.png">üì• Download Chart</a>'
    return href

# ===================== #
# 3. Custom CSS for styling
# ===================== #
st.markdown("""
    <style>
        .main-title {
            text-align: center;
            font-size: 36px;
            color: #2c3e50;
        }
        .sub-title {
            text-align: center;
            font-size: 20px;
            color: #34495e;
        }
        .chart-explanation {
            text-align: center;
            color: #555;
            margin-top: 10px;
        }
        .stButton button {
            width: 100%;
            padding: 10px;
            font-size: 18px;
        }
        .chart-container {
            border: 1px solid #ddd;
            border-radius: 10px;
            padding: 20px;
            background-color: #f9f9f9;
            margin-top: 20px;
        }
    </style>
""", unsafe_allow_html=True)

# ===================== #
# 4. Title and Input UI
# ===================== #
st.markdown("<div class='main-title'>üìä HR Analytics Dashboard</div>", unsafe_allow_html=True)
st.markdown("<div class='sub-title'>Ask any HR insight question and get a chart instantly!</div>", unsafe_allow_html=True)

st.write("")

user_input = st.text_input("üí¨ Enter your HR Question here:")

col1, col2 = st.columns([1, 1])
submit = col1.button("üöÄ Submit")
clear = col2.button("‚ùå Clear")

# ===================== #
# 5. Question Handler
# ===================== #
def show_chart(fig, explanation):
    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
    st.pyplot(fig)
    st.markdown(f'<div class="chart-explanation">{explanation}</div>', unsafe_allow_html=True)
    st.markdown(get_image_download_link(fig), unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

if submit:
    if "gender" in user_input.lower():
        gender_title = pd.merge(employee, title, on="emp_id")
        fig, ax = plt.subplots()
        sns.countplot(data=gender_title, x="gender", hue="title", ax=ax)
        ax.set_title("Gender Distribution by Job Title")
        show_chart(fig, "This chart shows how males and females are distributed across different job titles.")
    elif "promotion" in user_input.lower():
        current_year = 2025
        employee["last_promotion_year"] = pd.to_datetime(employee["last_promotion_date"]).dt.year
        employee["years_since_promotion"] = current_year - employee["last_promotion_year"]
        fig, ax = plt.subplots()
        sns.histplot(employee["years_since_promotion"], bins=10, kde=True, ax=ax)
        ax.set_title("Years Since Last Promotion")
        show_chart(fig, "This histogram shows how long it's been since employees last received a promotion.")
    elif "salary" in user_input.lower() and "growth" in user_input.lower():
        salary["from_date"] = pd.to_datetime(salary["from_date"])
        salary["year"] = salary["from_date"].dt.year
        avg_salary_by_year = salary.groupby("year")["salary"].mean().reset_index()
        fig, ax = plt.subplots()
        sns.lineplot(data=avg_salary_by_year, x="year", y="salary", marker="o", ax=ax)
        ax.set_title("Average Salary Growth Over Time")
        show_chart(fig, "This line chart shows the trend in average salary over the years.")
    elif "stable" in user_input.lower() or "stability" in user_input.lower():
        emp_dept = pd.merge(dept_emp, department, on="dept_id")
        emp_count = emp_dept["dept_name"].value_counts()
        fig, ax = plt.subplots()
        emp_count.plot(kind="bar", ax=ax)
        ax.set_title("Employee Count per Department")
        ax.set_ylabel("Number of Employees")
        show_chart(fig, "This chart shows the number of employees in each department (an indicator of stability).")
    elif "turnover" in user_input.lower():
        left_employees = employee[employee["status"] == "Left"]
        turnover_by_dept = pd.merge(left_employees, dept_emp, on="emp_id")
        turnover_by_dept = pd.merge(turnover_by_dept, department, on="dept_id")
        turnover_count = turnover_by_dept["dept_name"].value_counts()
        fig, ax = plt.subplots()
        turnover_count.plot(kind="bar", color="tomato", ax=ax)
        ax.set_title("Turnover by Department")
        ax.set_ylabel("Number of Employees Left")
        show_chart(fig, "This bar chart shows departments with the highest employee turnover.")
    else:
        st.warning("‚ùóThis data is restricted or unsupported question.")

if clear:
    st.experimental_rerun()
