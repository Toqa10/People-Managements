# -*- coding: utf-8 -*-
"""HR.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BRPDra8Zdc_vshxER2aey6dnJ-HG5b7a
"""
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import io

# Page setup
st.set_page_config(page_title="HR Insights Dashboard", layout="wide")
sns.set_style("whitegrid")

# --- Data Loading ---
@st.cache_data
def load_data():
    def read_file(name):
        try:
            df = pd.read_csv(name)
            # Clean column names
            df.columns = df.columns.str.lower().str.strip().str.replace(' ', '_')
            return df
        except Exception as e:
            st.warning(f"Error loading {name}: {str(e)}")
            return pd.DataFrame()

    return (
        read_file("current_employee_snapshot.csv"),
        read_file("department_employee.csv"),
        read_file("employee.csv"),
        read_file("department.csv"),
        read_file("salary.csv"),
        read_file("title.csv"),
        read_file("department_manager.csv"),
    )

current_emp, dept_emp, employee, department, salary, title, dept_manager = load_data()

# --- Data Preprocessing ---
def preprocess_data():
    # Process salary data
    salary_processed = pd.DataFrame()
    if not salary.empty:
        required_cols = ['from_date', 'employee_id', 'amount']
        if all(col in salary.columns for col in required_cols):
            try:
                salary_processed = salary.copy()
                salary_processed['year'] = pd.to_datetime(salary_processed['from_date']).dt.year
                salary_processed = salary_processed.sort_values(['employee_id', 'from_date'])
                salary_processed['prev_salary'] = salary_processed.groupby('employee_id')['amount'].shift(1)
                salary_processed['salary_growth'] = salary_processed['amount'] - salary_processed['prev_salary']
                salary_processed['growth_year'] = pd.to_datetime(salary_processed['from_date']).dt.year
            except Exception as e:
                st.error(f"Error processing salary data: {str(e)}")
    
    # Process current employee data
    top_salaries = pd.DataFrame()
    if not current_emp.empty:
        required_cols = ['dept_name', 'salary_amount']
        if all(col in current_emp.columns for col in required_cols):
            try:
                top_salaries = (
                    current_emp.groupby("dept_name", group_keys=False)
                    .apply(lambda x: x.nlargest(10, "salary_amount"))
                )
            except Exception as e:
                st.error(f"Error processing top salaries: {str(e)}")
    
    return salary_processed, top_salaries

salary_processed, top_salaries = preprocess_data()

# --- Helper function for saving plots ---
def fig_to_image(fig):
    buf = io.BytesIO()
    fig.savefig(buf, format="png", bbox_inches='tight', dpi=300)
    buf.seek(0)
    return buf

# --- Application Interface ---
st.title("üìä HR Analytics Dashboard")

# Data diagnostics section
with st.expander("üîç Data Diagnostics"):
    st.write("### Available columns in each dataset:")
    st.write(f"Current employees: {list(current_emp.columns) if not current_emp.empty else 'Empty'}")
    st.write(f"Salary data: {list(salary.columns) if not salary.empty else 'Empty'}")
    
    if not current_emp.empty:
        st.write("### Sample employee data:")
        st.write(current_emp.head(3))

# --- Supported Questions ---
allowed_questions = {
    "top salaries": {
        "description": "Show top salaries by department",
        "required_cols": ['dept_name', 'salary_amount']
    },
    "salary growth": {
        "description": "Show annual salary growth", 
        "required_cols": ['growth_year', 'salary_growth']
    },
    "gender salary": {
        "description": "Show average salary by gender",
        "required_cols": ['gender', 'salary_amount']
    },
    "tenure salary": {
        "description": "Show salary vs tenure",
        "required_cols": ['tenure', 'salary_amount']
    }
}

# --- Question Interface ---
question = st.text_input("‚ùì Ask a question about employee data")

if question:
    q = question.lower()
    matched = [key for key in allowed_questions if key in q]
    
    if matched:
        question_info = allowed_questions[matched[0]]
        st.success(f"‚úÖ Preparing: {question_info['description']}")
        
        # Check for required columns
        missing_cols = [col for col in question_info['required_cols'] 
                       if col not in current_emp.columns and col not in salary_processed.columns]
        
        if missing_cols:
            st.error(f"Required columns missing: {missing_cols}")
        else:
            try:
                fig, ax = plt.subplots(figsize=(10, 6))
                
                if "top salaries" in matched[0]:
                    if not top_salaries.empty:
                        plot_data = top_salaries.groupby("dept_name").head(1).sort_values("salary_amount", ascending=False)
                        sns.barplot(data=plot_data, x="dept_name", y="salary_amount", ax=ax)
                        ax.set_title("Top Salaries by Department")
                        plt.xticks(rotation=45)
                
                elif "salary growth" in matched[0]:
                    if not salary_processed.empty:
                        plot_data = salary_processed.groupby("growth_year")["salary_growth"].mean().reset_index()
                        sns.lineplot(data=plot_data, x="growth_year", y="salary_growth", ax=ax, marker='o')
                        ax.set_title("Annual Salary Growth")
                
                elif "gender salary" in matched[0]:
                    if not current_emp.empty:
                        sns.barplot(data=current_emp, x="gender", y="salary_amount", ax=ax, estimator='mean')
                        ax.set_title("Average Salary by Gender")
                
                elif "tenure salary" in matched[0]:
                    if not current_emp.empty:
                        current_emp_clean = current_emp.dropna(subset=["tenure", "salary_amount"])
                        sns.scatterplot(data=current_emp_clean, x="tenure", y="salary_amount", ax=ax)
                        ax.set_title("Salary vs Tenure")
                
                st.pyplot(fig)
                st.download_button("‚¨áÔ∏è Download Chart", data=fig_to_image(fig), 
                                 file_name=f"{matched[0]}.png", mime="image/png")
                
            except Exception as e:
                st.error(f"Error generating visualization: {str(e)}")
    else:
        st.warning("Question not supported. Available questions:")
        for q, info in allowed_questions.items():
            st.write(f"- {q}: {info['description']}")

# --- Additional Analysis Sections ---
st.sidebar.header("Additional Analysis Options")

if st.sidebar.checkbox("Show Department Summary"):
    if not department.empty and not current_emp.empty:
        st.subheader("Department Summary")
        dept_summary = current_emp.groupby('dept_name').agg(
            employee_count=('employee_id', 'nunique'),
            avg_salary=('salary_amount', 'mean')
        ).sort_values('avg_salary', ascending=False)
        st.dataframe(dept_summary.style.background_gradient(cmap='Blues'))

if st.sidebar.checkbox("Show Salary Distribution"):
    if not current_emp.empty:
        st.subheader("Salary Distribution")
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.histplot(current_emp['salary_amount'], bins=30, kde=True, ax=ax)
        ax.set_title("Salary Distribution Across Organization")
        st.pyplot(fig)

if st.sidebar.checkbox("Show Employee Tenure Analysis"):
    if not current_emp.empty and 'tenure' in current_emp.columns:
        st.subheader("Tenure Analysis")
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.boxplot(data=current_emp, x='dept_name', y='tenure', ax=ax)
        ax.set_title("Employee Tenure by Department")
        plt.xticks(rotation=45)
        st.pyplot(fig)
