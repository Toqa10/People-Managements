# -*- coding: utf-8 -*-
"""HR.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BRPDra8Zdc_vshxER2aey6dnJ-HG5b7a
"""

# Commented out IPython magic to ensure Python compatibility.
# import streamlit as st
# import pandas as pd
# import joblib
# 
# # تحميل الموديل المدرب
# model = joblib.load('risk_model.pkl')
# 
# # عنوان التطبيق
# st.title("🎯 Employee Risk Prediction App")
# 
# st.write("Upload employee data to predict their risk score.")
# 
# # تحميل البيانات من المستخدم
# uploaded_file = st.file_uploader("📤 Upload a CSV file", type=["csv"])
# 
# if uploaded_file is not None:
#     data = pd.read_csv(uploaded_file)
#     st.write("✅ Uploaded Data Preview:")
#     st.write(data.head())
# 
#     # تحديد الأعمدة المطلوبة
#     expected_cols = ['gender', 'title', 'dept_name', 'tenure', 'amount', 'num_promotions']
# 
#     # التحقق إن كل الأعمدة موجودة
#     if all(col in data.columns for col in expected_cols):
#         # التأكد من الترتيب
#         input_data = data[expected_cols]
# 
#         # التعامل مع الترميز (لو دربتي الموديل على بيانات مش مرمزة قوليلي)
#         # هنا بنفترض الترميز في مرحلة التدريب
# 
#         # التنبؤ
#         predictions = model.predict(input_data)
# 
#         # عرض النتائج
#         data['Predicted Risk'] = predictions
#         st.success("✅ Predictions completed!")
#         st.write(data)
# 
#         # تحميل النتائج
#         csv = data.to_csv(index=False)
#         st.download_button("⬇️ Download Results as CSV", data=csv, file_name="risk_predictions.csv", mime="text/csv")
#     else:
#         st.error("❌ Please upload a CSV file with the correct columns: " + ", ".join(expected_cols))
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import joblib
# 
# df = pd.read_csv("employee.csv")
# 
# model = joblib.load("rf_model.pkl")
# 
# st.title("🚨 HR Risk Prediction App")
# 
# row = st.selectbox("اختر رقم الموظف للتنبؤ بالمخاطر", df.index)
# 
# if st.button("تنبأ"):
#     input_data = df.drop(columns=["risk_score"]).iloc[[row]]
#     prediction = model.predict(input_data)[0]
#     st.success(f"تقييم المخاطر المتوقع: {prediction}")
#
# --- Streamlit HR Analytics App ---
# --- Streamlit HR Analytics App ---
import streamlit as st
import pandas as pd
import joblib

# App title
st.title("🎯 Employee Risk Prediction App")
st.write("Upload employee data to predict their risk score.")

# Load model safely
@st.cache_resource
def load_model():
    try:
        return joblib.load("risk_model.pkl")
    except FileNotFoundError:
        st.error("❌ Trained model file (risk_model.pkl) not found.")
        return None

model = load_model()

# File uploader
uploaded_file = st.file_uploader("📤 Upload a CSV file", type=["csv"])

if model is not None and uploaded_file is not None:
    try:
        # Read uploaded CSV
        data = pd.read_csv(uploaded_file)
        st.write("✅ Uploaded Data Preview:")
        st.dataframe(data)

        # Expected columns
        expected_cols = ['gender', 'title', 'dept_name', 'tenure', 'amount', 'num_promotions']

        # Check for missing columns
        if all(col in data.columns for col in expected_cols):
            input_data = data[expected_cols]

            # Run prediction
            predictions = model.predict(input_data)
            data['Predicted Risk'] = predictions

            st.success("✅ Predictions completed!")
            st.dataframe(data)

            # Download result
            csv = data.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="⬇️ Download Results as CSV",
                data=csv,
                file_name="risk_predictions.csv",
                mime="text/csv"
            )
        else:
            missing = [col for col in expected_cols if col not in data.columns]
            st.error(f"❌ Missing required columns: {', '.join(missing)}")

    except Exception as e:
        st.error(f"⚠️ Error processing file: {e}")
elif uploaded_file is None:
    st.info("📥 Please upload a CSV file to proceed.")
