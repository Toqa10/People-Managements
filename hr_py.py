# -*- coding: utf-8 -*-
"""HR.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BRPDra8Zdc_vshxER2aey6dnJ-HG5b7a
"""
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from io import BytesIO

# إعداد التصميم
sns.set_style("whitegrid")
plt.rcParams["axes.titlesize"] = 16
plt.rcParams["axes.labelsize"] = 13

# تحميل البيانات
@st.cache_data
def load_data():
    employee_df = pd.read_csv("employee.csv")
    department_df = pd.read_csv("department.csv")
    salary_df = pd.read_csv("salary.csv")
    title_df = pd.read_csv("title.csv")
    return employee_df, department_df, salary_df, title_df

employee_df, department_df, salary_df, title_df = load_data()

# دمج البيانات
employee_df = employee_df.merge(department_df, on='dept_id', how='left')
employee_df = employee_df.merge(title_df, on='emp_id', how='left')
employee_df['hire_date'] = pd.to_datetime(employee_df['hire_date'])
employee_df['tenure_years'] = (pd.to_datetime("today") - employee_df['hire_date']).dt.days / 365

salary_df['from_date'] = pd.to_datetime(salary_df['from_date'])
salary_df['to_date'] = pd.to_datetime(salary_df['to_date'])
latest_salary_df = salary_df.sort_values('to_date').drop_duplicates('emp_id', keep='last')
employee_df = employee_df.merge(latest_salary_df[['emp_id', 'salary', 'from_date', 'to_date']], on='emp_id', how='left')
employee_df.rename(columns={'salary': 'salary_amount'}, inplace=True)

# الرسم مع خاصية التحميل
def show_chart_with_download(fig, filename, explanation):
    st.pyplot(fig)
    st.markdown(f"📌 {explanation}")
    buffer = BytesIO()
    fig.savefig(buffer, format="png")
    st.download_button("⬇️ Download Chart", data=buffer.getvalue(), file_name=filename, mime="image/png")

# الرسوم البيانية
def plot_gender_distribution_by_job(df):
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.countplot(data=df, x='title', hue='gender', ax=ax)
    ax.set_title("Gender Distribution by Job Title")
    plt.xticks(rotation=45)
    show_chart_with_download(fig, "gender_job_dist.png", "This chart shows gender distribution across job titles.")

def plot_average_tenure_per_department(df):
    avg_tenure = df.groupby('dept_name')['tenure_years'].mean().sort_values(ascending=False)
    fig, ax = plt.subplots(figsize=(10, 6))
    avg_tenure.plot(kind='bar', ax=ax)
    ax.set_ylabel("Average Tenure (Years)")
    ax.set_title("Average Tenure per Department")
    show_chart_with_download(fig, "avg_tenure.png", "Shows how long employees stay in each department on average.")

def plot_total_salary_by_department(df):
    total_salary = df.groupby('dept_name')['salary_amount'].sum().sort_values(ascending=False)
    fig, ax = plt.subplots(figsize=(10, 6))
    total_salary.plot(kind='bar', ax=ax)
    ax.set_ylabel("Total Salary Paid")
    ax.set_title("Total Salary by Department")
    show_chart_with_download(fig, "total_salary.png", "Shows which departments have the highest total salary payouts.")

def plot_high_turnover_departments(df):
    turnover_counts = df['dept_name'].value_counts().sort_values()
    fig, ax = plt.subplots(figsize=(10, 6))
    turnover_counts.plot(kind='barh', ax=ax)
    ax.set_title("Employee Count by Department (Turnover Risk)")
    show_chart_with_download(fig, "turnover_dept.png", "Low employee count may indicate high turnover risk.")

def plot_top_salaries_by_department(df):
    top_salaries = df.groupby('dept_name')['salary_amount'].max().sort_values(ascending=False)
    fig, ax = plt.subplots(figsize=(10, 6))
    top_salaries.plot(kind='bar', ax=ax)
    ax.set_ylabel("Top Salary")
    ax.set_title("Top Salary by Department")
    show_chart_with_download(fig, "top_salary.png", "Shows the maximum salary paid in each department.")

def plot_salary_gap_by_gender_per_department(df):
    gap_df = df.groupby(['dept_name', 'gender'])['salary_amount'].mean().unstack()
    fig, ax = plt.subplots(figsize=(10, 6))
    gap_df.plot(kind='bar', ax=ax)
    ax.set_ylabel("Average Salary")
    ax.set_title("Salary Gap by Gender per Department")
    show_chart_with_download(fig, "salary_gap.png", "Displays average salary differences between genders.")

def plot_annual_salary_growth(salary_df):
    salary_df['year'] = salary_df['from_date'].dt.year
    growth = salary_df.groupby('year')['salary'].mean()
    fig, ax = plt.subplots(figsize=(10, 6))
    growth.plot(marker='o', ax=ax)
    ax.set_ylabel("Average Salary")
    ax.set_title("Annual Salary Growth")
    show_chart_with_download(fig, "salary_growth.png", "Tracks average salary changes over the years.")

# ----------------- واجهة المستخدم ------------------

st.image("https://cdn-icons-png.flaticon.com/512/2950/2950731.png", width=80)
st.title("📊 Advanced HR Analytics Dashboard")
st.markdown("""
Welcome to the **HR Insights Dashboard** – your central hub for analyzing employee performance, salary trends, turnover risks, and more.

Explore data-driven insights to help HR teams make smarter decisions.
""")

# الشريط الجانبي
st.sidebar.title("🧭 Navigation")
analysis_options = [
    "Gender Analysis",
    "Tenure Analysis",
    "Salary Analysis",
    "Turnover Risk",
    "Unsupported Questions"
]
selected_analysis = st.sidebar.radio("📌 Select Analysis Section:", analysis_options)

st.sidebar.markdown("---")
st.sidebar.markdown("💡 **Ask a Question**")
question = st.sidebar.text_input("What do you want to know?")

# ---------- التحليل حسب الاختيار ----------

if selected_analysis == "Gender Analysis":
    st.header("👩‍💼 Gender Analysis")
    plot_gender_distribution_by_job(employee_df)
    plot_salary_gap_by_gender_per_department(employee_df)

elif selected_analysis == "Tenure Analysis":
    st.header("🕒 Tenure Analysis")
    plot_average_tenure_per_department(employee_df)

elif selected_analysis == "Salary Analysis":
    st.header("💸 Salary Analysis")
    tab1, tab2, tab3 = st.tabs(["Total Salary", "Top Salaries", "Growth Over Time"])
    with tab1:
        plot_total_salary_by_department(employee_df)
    with tab2:
        plot_top_salaries_by_department(employee_df)
    with tab3:
        plot_annual_salary_growth(salary_df)

elif selected_analysis == "Turnover Risk":
    st.header("🔁 Turnover Risk")
    plot_high_turnover_departments(employee_df)

elif selected_analysis == "Unsupported Questions":
    st.header("❓ Unsupported Questions")
    if question:
        st.error("🚫 Sorry, this data is restricted or unsupported at the moment.")
    else:
        st.info("Please type your question in the sidebar.")

# Footer
st.markdown("---")
st.markdown("<center style='font-size:13px'>📊 Built with ❤️ using Streamlit | 2025 © Your Company</center>", unsafe_allow_html=True)
