# -*- coding: utf-8 -*-
"""HR.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BRPDra8Zdc_vshxER2aey6dnJ-HG5b7a
"""
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import io
from datetime import datetime

# -------------- إعداد الواجهة العامة ---------------- #
st.set_page_config(page_title="📊 HR Analytics Dashboard", layout="wide")
sns.set_style("whitegrid")

# ---------------- تحميل البيانات ---------------- #
@st.cache_data
def load_csv(file):
    try:
        df = pd.read_csv(file)
        df.columns = df.columns.str.lower().str.replace(' ', '_')
        return df
    except:
        return pd.DataFrame()

salary = load_csv("salary.csv")  # ❗ يجب أن يكون الملف باسم salary.csv
employee = load_csv("employee.csv")
department = load_csv("department.csv")
dept_emp = load_csv("department_employee.csv")
title = load_csv("title.csv")

# -------------- معالجة البيانات ---------------- #
def preprocess(employee, salary, dept_emp, department, title):
    df = employee.copy()
    salary_latest = salary.copy()

    # حساب العمر
    df['birth_date'] = pd.to_datetime(df['birth_date'], errors='coerce')
    df['age'] = ((pd.Timestamp.today() - df['birth_date']).dt.days // 365)

    # حساب عدد سنوات العمل
    df['hire_date'] = pd.to_datetime(df['hire_date'], errors='coerce')
    df['tenure_years'] = ((pd.Timestamp.today() - df['hire_date']).dt.days // 365)

    # آخر مرتب
    salary_latest['to_date'] = pd.to_datetime(salary_latest['to_date'], errors='coerce')
    latest_salary = salary_latest.sort_values('to_date').drop_duplicates('employee_id', keep='last')
    df = df.merge(latest_salary[['employee_id', 'amount']], left_on='id', right_on='employee_id', how='left')
    df.rename(columns={'amount': 'salary_amount'}, inplace=True)

    # آخر إدارة
    dept_emp['from_date'] = pd.to_datetime(dept_emp['from_date'], errors='coerce')
    last_dept = dept_emp.sort_values('from_date').drop_duplicates('employee_id', keep='last')
    last_dept = last_dept.merge(department[['id', 'dept_name']], left_on='department_id', right_on='id', how='left')
    df = df.merge(last_dept[['employee_id', 'dept_name']], left_on='id', right_on='employee_id', how='left')

    # الترقية وعدد المناصب
    title['from_date'] = pd.to_datetime(title['from_date'], errors='coerce')
    promotions = title.groupby('employee_id')['title'].nunique().reset_index()
    promotions.columns = ['employee_id', 'num_promotions']
    df = df.merge(promotions, left_on='id', right_on='employee_id', how='left')

    return df

hr_data = preprocess(employee, salary, dept_emp, department, title)

# ----------- دالة حفظ الرسوم كصورة ------------ #
def save_fig_as_image(fig):
    buf = io.BytesIO()
    fig.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    return buf

# ----------- رسم المخططات ---------------- #
def plot_avg_salary_by_gender(df):
    fig, ax = plt.subplots()
    sns.barplot(data=df, x='gender', y='salary_amount', estimator='mean', palette='coolwarm', ax=ax)
    ax.set_title("👫 Average Salary by Gender")
    st.pyplot(fig)
    st.caption("This chart shows how average salary differs between genders.")
    st.download_button("📥 Download", save_fig_as_image(fig), "avg_salary_gender.png", "image/png")

def plot_tenure_by_dept(df):
    avg_tenure = df.groupby('dept_name')['tenure_years'].mean().sort_values()
    fig, ax = plt.subplots(figsize=(10, 6))
    avg_tenure.plot(kind='barh', color='teal', ax=ax)
    ax.set_title("🕒 Average Tenure by Department")
    ax.set_xlabel("Years")
    st.pyplot(fig)
    st.caption("This chart shows average tenure in each department — a proxy for turnover.")
    st.download_button("📥 Download", save_fig_as_image(fig), "tenure_by_department.png", "image/png")

def plot_salary_gap_by_dept_gender(df):
    df = df.dropna(subset=['dept_name', 'gender', 'salary_amount'])
    gap = df.groupby(['dept_name', 'gender'])['salary_amount'].mean().unstack()
    fig, ax = plt.subplots(figsize=(12, 6))
    gap.plot(kind='bar', ax=ax, colormap='Accent')
    ax.set_title("💸 Salary Gap by Gender per Department")
    ax.set_ylabel("Average Salary")
    st.pyplot(fig)
    st.caption("This chart compares average salaries by gender in each department.")
    st.download_button("📥 Download", save_fig_as_image(fig), "salary_gap_by_dept_gender.png", "image/png")

# ---------------- واجهة المستخدم ---------------- #
st.markdown("<h1 style='text-align:center;'>📊 HR Analytics Dashboard</h1>", unsafe_allow_html=True)
st.markdown("<h4 style='text-align:center; color:gray;'>Explore insights about salaries, tenure, and workforce structure</h4>", unsafe_allow_html=True)

# قائمة الخيارات
menu = ["📌 Overview", "👫 Salary by Gender", "🕒 Tenure by Department", "💸 Salary Gap by Gender", "📂 Raw Data"]
choice = st.sidebar.radio("Select Analysis:", menu)

# عرض حسب الاختيار
if choice == "📌 Overview":
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Total Employees", f"{hr_data['id'].nunique():,}")
    with col2:
        st.metric("Average Age", f"{hr_data['age'].mean():.1f} years")
    with col3:
        st.metric("Avg. Tenure", f"{hr_data['tenure_years'].mean():.1f} years")
    st.markdown("### 👀 Quick Charts")
    plot_avg_salary_by_gender(hr_data)
    plot_tenure_by_dept(hr_data)

elif choice == "👫 Salary by Gender":
    st.header("👫 Average Salary by Gender")
    plot_avg_salary_by_gender(hr_data)

elif choice == "🕒 Tenure by Department":
    st.header("🕒 Average Tenure by Department")
    plot_tenure_by_dept(hr_data)

elif choice == "💸 Salary Gap by Gender":
    st.header("💸 Salary Gap by Gender per Department")
    plot_salary_gap_by_dept_gender(hr_data)

elif choice == "📂 Raw Data":
    st.header("📂 View Raw Data")
    selected = st.selectbox("Choose table to display:", ["employee", "salary", "department", "title", "department_employee"])
    if selected == "employee":
        st.dataframe(employee)
    elif selected == "salary":
        st.dataframe(salary)
    elif selected == "department":
        st.dataframe(department)
    elif selected == "title":
        st.dataframe(title)
    elif selected == "department_employee":
        st.dataframe(dept_emp)

# ---------------- الرد على الأسئلة ---------------- #
st.sidebar.markdown("---")
st.sidebar.subheader("🔍 Ask a Question")
q = st.sidebar.text_input("e.g., show average salary by gender")

if q:
    q = q.lower()
    if "salary" in q and "gender" in q:
        st.subheader("👫 Chart: Average Salary by Gender")
        plot_avg_salary_by_gender(hr_data)
    elif "tenure" in q and "department" in q:
        st.subheader("🕒 Chart: Tenure by Department")
        plot_tenure_by_dept(hr_data)
    elif "salary gap" in q or ("gender" in q and "department" in q):
        st.subheader("💸 Chart: Salary Gap by Gender per Department")
        plot_salary_gap_by_dept_gender(hr_data)
    else:
        st.warning("❗ This data is restricted or unsupported in current dashboard.")
