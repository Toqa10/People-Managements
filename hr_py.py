# -*- coding: utf-8 -*-
"""HR.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BRPDra8Zdc_vshxER2aey6dnJ-HG5b7a
"""

# Commented out IPython magic to ensure Python compatibility.
# import streamlit as st
# import pandas as pd
# import joblib
# 
# # تحميل الموديل المدرب
# model = joblib.load('risk_model.pkl')
# 
# # عنوان التطبيق
# st.title("🎯 Employee Risk Prediction App")
# 
# st.write("Upload employee data to predict their risk score.")
# 
# # تحميل البيانات من المستخدم
# uploaded_file = st.file_uploader("📤 Upload a CSV file", type=["csv"])
# 
# if uploaded_file is not None:
#     data = pd.read_csv(uploaded_file)
#     st.write("✅ Uploaded Data Preview:")
#     st.write(data.head())
# 
#     # تحديد الأعمدة المطلوبة
#     expected_cols = ['gender', 'title', 'dept_name', 'tenure', 'amount', 'num_promotions']
# 
#     # التحقق إن كل الأعمدة موجودة
#     if all(col in data.columns for col in expected_cols):
#         # التأكد من الترتيب
#         input_data = data[expected_cols]
# 
#         # التعامل مع الترميز (لو دربتي الموديل على بيانات مش مرمزة قوليلي)
#         # هنا بنفترض الترميز في مرحلة التدريب
# 
#         # التنبؤ
#         predictions = model.predict(input_data)
# 
#         # عرض النتائج
#         data['Predicted Risk'] = predictions
#         st.success("✅ Predictions completed!")
#         st.write(data)
# 
#         # تحميل النتائج
#         csv = data.to_csv(index=False)
#         st.download_button("⬇️ Download Results as CSV", data=csv, file_name="risk_predictions.csv", mime="text/csv")
#     else:
#         st.error("❌ Please upload a CSV file with the correct columns: " + ", ".join(expected_cols))
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import joblib
# 
# df = pd.read_csv("employee.csv")
# 
# model = joblib.load("rf_model.pkl")
# 
# st.title("🚨 HR Risk Prediction App")
# 
# row = st.selectbox("اختر رقم الموظف للتنبؤ بالمخاطر", df.index)
# 
# if st.button("تنبأ"):
#     input_data = df.drop(columns=["risk_score"]).iloc[[row]]
#     prediction = model.predict(input_data)[0]
#     st.success(f"تقييم المخاطر المتوقع: {prediction}")
#
# --- Streamlit HR Analytics App ---
# --- Streamlit HR Analytics App ---
# --- Streamlit HR Analytics App ---
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# --- تحميل البيانات ---
@st.cache_data
def load_data():
    def try_read(file):
        try:
            return pd.read_csv(file)
        except FileNotFoundError:
            return pd.DataFrame()

    return (
        try_read("current_employee_snapshot.csv"),
        try_read("department_employee.csv"),
        try_read("employee.csv"),
        try_read("department.csv"),
        try_read("salary.csv"),
        try_read("title.csv"),
        try_read("department_manager.csv")
    )

# تحميل كل الملفات
current_emp_snapshot, department_employee, employee, department, salary, title, department_manager = load_data()

# تجهيز البيانات الثانوية
if not salary.empty:
    salary['year'] = pd.to_datetime(salary['from_date']).dt.year
    salary_sorted = salary.sort_values(['employee_id', 'from_date'])
    salary_sorted['prev_salary'] = salary_sorted.groupby('employee_id')['amount'].shift(1)
    salary_sorted['salary_growth'] = salary_sorted['amount'] - salary_sorted['prev_salary']
    salary_sorted['growth_year'] = pd.to_datetime(salary_sorted['from_date']).dt.year
else:
    salary_sorted = pd.DataFrame()

if not current_emp_snapshot.empty:
    top_10 = current_emp_snapshot.groupby("dept_name").apply(lambda x: x.sort_values("salary_amount", ascending=False).head(10))
else:
    top_10 = pd.DataFrame()

# --- واجهة التطبيق ---
st.set_page_config(layout="wide")
st.title("📊 HR Insights Chat App")

st.markdown("👩‍💼 Ask questions about your HR data and get instant insights with charts.")
user_input = st.text_area("📝 Type your questions below (separated by commas or lines):", height=150)

# --- قائمة الأسئلة المسموحة ---
allowed_questions = {
    "salary growth": "Salary growth over the years",
    "top salaries": "Top salaries by department",
    "highest paid": "Top salaries by department",
    "average salary per gender": "Average salary per gender",
    "gender salary": "Average salary per gender",
    "tenure vs salary": "Tenure vs Salary Scatter Plot"
}

# --- عرض الرسوم ---
def render_chart(keyword):
    if keyword == "salary growth" and not salary_sorted.empty:
        fig, ax = plt.subplots(figsize=(10, 4))
        sns.lineplot(data=salary_sorted, x="growth_year", y="salary_growth", ax=ax)
        ax.set_title("Average Salary Growth per Year")
        st.pyplot(fig)

    elif keyword in ["top salaries", "highest paid"] and not top_10.empty:
        fig, ax = plt.subplots(figsize=(12, 5))
        top10_plot = top_10.groupby("dept_name").head(1).sort_values("salary_amount", ascending=False)
        sns.barplot(data=top10_plot, x="dept_name", y="salary_amount", ax=ax)
        ax.set_title("Top Salaries by Department")
        plt.xticks(rotation=45)
        st.pyplot(fig)

    elif keyword in ["gender salary", "average salary per gender"] and not current_emp_snapshot.empty:
        fig, ax = plt.subplots()
        sns.barplot(data=current_emp_snapshot, x="gender", y="salary_amount", estimator='mean', ax=ax)
        ax.set_title("Average Salary per Gender")
        st.pyplot(fig)

    elif keyword == "tenure vs salary" and not current_emp_snapshot.empty:
        if "tenure" in current_emp_snapshot.columns:
            fig, ax = plt.subplots()
            sns.scatterplot(data=current_emp_snapshot, x="tenure", y="salary_amount", ax=ax)
            ax.set_title("Tenure vs Salary")
            st.pyplot(fig)
        else:
            st.warning("⚠️ 'tenure' column not found in the dataset.")

# --- تحليل الأسئلة ---
if user_input:
    st.divider()
    questions = [q.strip().lower() for q in user_input.replace('\n', ',').split(',') if q.strip()]
    valid = False

    for q in questions:
        found = False
        for key in allowed_questions:
            if key in q:
                st.subheader(f"📌 {allowed_questions[key]}")
                render_chart(key)
                found = True
                valid = True
                break
        if not found:
            st.warning(f"❌ Sorry, this question is not recognized: **{q}**")

    if not valid:
        st.info("💡 Try asking questions like: 'salary growth', 'top salaries', 'tenure vs salary', etc.")

