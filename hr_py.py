# -*- coding: utf-8 -*-
"""HR.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BRPDra8Zdc_vshxER2aey6dnJ-HG5b7a
"""

# Commented out IPython magic to ensure Python compatibility.
# import streamlit as st
# import pandas as pd
# import joblib
# 
# # تحميل الموديل المدرب
# model = joblib.load('risk_model.pkl')
# 
# # عنوان التطبيق
# st.title("🎯 Employee Risk Prediction App")
# 
# st.write("Upload employee data to predict their risk score.")
# 
# # تحميل البيانات من المستخدم
# uploaded_file = st.file_uploader("📤 Upload a CSV file", type=["csv"])
# 
# if uploaded_file is not None:
#     data = pd.read_csv(uploaded_file)
#     st.write("✅ Uploaded Data Preview:")
#     st.write(data.head())
# 
#     # تحديد الأعمدة المطلوبة
#     expected_cols = ['gender', 'title', 'dept_name', 'tenure', 'amount', 'num_promotions']
# 
#     # التحقق إن كل الأعمدة موجودة
#     if all(col in data.columns for col in expected_cols):
#         # التأكد من الترتيب
#         input_data = data[expected_cols]
# 
#         # التعامل مع الترميز (لو دربتي الموديل على بيانات مش مرمزة قوليلي)
#         # هنا بنفترض الترميز في مرحلة التدريب
# 
#         # التنبؤ
#         predictions = model.predict(input_data)
# 
#         # عرض النتائج
#         data['Predicted Risk'] = predictions
#         st.success("✅ Predictions completed!")
#         st.write(data)
# 
#         # تحميل النتائج
#         csv = data.to_csv(index=False)
#         st.download_button("⬇️ Download Results as CSV", data=csv, file_name="risk_predictions.csv", mime="text/csv")
#     else:
#         st.error("❌ Please upload a CSV file with the correct columns: " + ", ".join(expected_cols))
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import joblib
# 
# df = pd.read_csv("employee.csv")
# 
# model = joblib.load("rf_model.pkl")
# 
# st.title("🚨 HR Risk Prediction App")
# 
# row = st.selectbox("اختر رقم الموظف للتنبؤ بالمخاطر", df.index)
# 
# if st.button("تنبأ"):
#     input_data = df.drop(columns=["risk_score"]).iloc[[row]]
#     prediction = model.predict(input_data)[0]
#     st.success(f"تقييم المخاطر المتوقع: {prediction}")
#
# --- Streamlit HR Analytics App ---
# --- Streamlit HR Analytics App ---
# --- Streamlit HR Analytics App ---
# --- Streamlit HR Analytics App ---
# --- HR Analytics Streamlit App ---
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# --- Page Config ---
st.set_page_config(page_title="HR Analytics App", layout="wide")

# --- Load Data ---
@st.cache_data
def load_data():
    def safe_read(file):
        try:
            return pd.read_csv(file)
        except:
            return pd.DataFrame()

    current_emp_snapshot = safe_read("current_employee_snapshot.csv")
    department_employee = safe_read("department_employee.csv")
    employee = safe_read("employee.csv")
    department = safe_read("department.csv")
    salary = safe_read("salary.csv")  # Not salary_sample.csv
    title = safe_read("title.csv")
    department_manager = safe_read("department_manager.csv")

    return current_emp_snapshot, department_employee, employee, department, salary, title, department_manager

# Load datasets
current_emp_snapshot, department_employee, employee, department, salary, title, department_manager = load_data()

# --- Data Processing ---
if not salary.empty:
    salary['year'] = pd.to_datetime(salary['from_date']).dt.year
    salary_sorted = salary.sort_values(['employee_id', 'from_date'])
    salary_sorted['prev_salary'] = salary_sorted.groupby('employee_id')['amount'].shift(1)
    salary_sorted['salary_growth'] = salary_sorted['amount'] - salary_sorted['prev_salary']
    salary_sorted['growth_year'] = pd.to_datetime(salary_sorted['from_date']).dt.year
else:
    salary_sorted = pd.DataFrame()

merged = salary.merge(title, on='employee_id') if not salary.empty and not title.empty else pd.DataFrame()

if not current_emp_snapshot.empty:
    top_10 = current_emp_snapshot.groupby("dept_name").apply(
        lambda x: x.sort_values("salary_amount", ascending=False).head(10)
    ).reset_index(drop=True)
else:
    top_10 = pd.DataFrame()

# --- Layout ---
st.title("📊 HR Analytics Chat App")
st.markdown("Ask a question from the supported insights to see an interactive chart.")

question = st.text_input("❓ Ask your HR question (e.g., 'Show me top salaries')")

# --- Supported Questions ---
allowed_questions = {
    "top salaries": "Top 10 highest-paid employees per department.",
    "average salary per gender": "Comparison of average salaries by gender.",
    "tenure vs salary": "Relationship between employee tenure and salary.",
    "salary growth": "Year-over-year salary growth trends."
}

# --- Chart Rendering ---
if question:
    q = question.lower()
    matched = False

    for key in allowed_questions:
        if key in q:
            matched = key
            break

    if matched:
        st.success(f"✅ Showing chart for: {matched.capitalize()}")
        st.caption(allowed_questions[matched])

        if matched == "top salaries" and not top_10.empty:
            fig, ax = plt.subplots(figsize=(10, 5))
            top10_plot = top_10.sort_values("salary_amount", ascending=False).drop_duplicates(subset=["dept_name"])
            sns.barplot(data=top10_plot, x="dept_name", y="salary_amount", ax=ax)
            ax.set_title("Top Salaries by Department", fontsize=14)
            plt.xticks(rotation=45)
            st.pyplot(fig)
            st.download_button("⬇️ Download Chart", data=fig_to_bytes(fig), file_name="top_salaries.png")

        elif matched == "average salary per gender" and not current_emp_snapshot.empty:
            fig, ax = plt.subplots()
            sns.barplot(data=current_emp_snapshot, x="gender", y="salary_amount", estimator='mean', ax=ax)
            ax.set_title("Average Salary per Gender")
            st.pyplot(fig)
            st.download_button("⬇️ Download Chart", data=fig_to_bytes(fig), file_name="gender_salary.png")

        elif matched == "tenure vs salary" and not current_emp_snapshot.empty:
            if "tenure" in current_emp_snapshot.columns and "salary_amount" in current_emp_snapshot.columns:
                fig, ax = plt.subplots()
                sns.scatterplot(data=current_emp_snapshot, x="tenure", y="salary_amount", ax=ax)
                ax.set_title("Tenure vs Salary")
                st.pyplot(fig)
                st.download_button("⬇️ Download Chart", data=fig_to_bytes(fig), file_name="tenure_vs_salary.png")
            else:
                st.warning("Required columns not found in current_employee_snapshot.")

        elif matched == "salary growth" and not salary_sorted.empty:
            fig, ax = plt.subplots(figsize=(10, 4))
            avg_growth = salary_sorted.groupby("growth_year")["salary_growth"].mean().reset_index()
            sns.lineplot(data=avg_growth, x="growth_year", y="salary_growth", ax=ax)
            ax.set_title("Average Salary Growth per Year")
            st.pyplot(fig)
            st.download_button("⬇️ Download Chart", data=fig_to_bytes(fig), file_name="salary_growth.png")
    else:
        st.warning("⚠️ This data is restricted and cannot be visualized.")
else:
    st.info("💬 Please enter a question above to generate a chart.")

# --- Helper: Convert matplotlib fig to image bytes ---
def fig_to_bytes(fig):
    import io
    buf = io.BytesIO()
    fig.savefig(buf, format="png")
    buf.seek(0)
    return buf.read()
