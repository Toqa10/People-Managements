# -*- coding: utf-8 -*-
"""HR.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BRPDra8Zdc_vshxER2aey6dnJ-HG5b7a
"""
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import io

# ==================== PAGE SETUP ====================
st.set_page_config(page_title="📊 HR Analytics Dashboard", page_icon="📁", layout="wide")

# ==================== CUSTOM CSS ====================
st.markdown("""
<style>
.stApp {
    background-color: #f0f2f6;
}
h1, h2, h3 {
    text-align: center;
    color: #0f4c81;
}
.chart-explanation {
    text-align: center;
    font-size: 16px;
    color: #444;
    margin-top: 10px;
}
.stButton>button {
    background-color: #0f4c81;
    color: white;
    font-weight: bold;
    border-radius: 8px;
    padding: 8px 24px;
    margin: 5px;
}
.stFileUploader {
    border: 2px dashed #0f4c81;
}
</style>
""", unsafe_allow_html=True)

# ==================== TITLE ====================
st.markdown("## 📊 Welcome to the HR Analytics Dashboard")

# ==================== FILE UPLOAD ====================
st.subheader("📂 Upload your HR dataset (CSV files only)")
uploaded_file = st.file_uploader("Choose your main HR file (employee.csv)", type="csv")

# ==================== QUESTION HANDLING ====================
st.subheader("💬 Ask your HR question")

question = st.text_input("Type your question here...", placeholder="e.g. What is the gender distribution across job titles?")
submit = st.button("Submit")
clear = st.button("Clear")

if clear:
    st.experimental_rerun()

# ==================== PROCESSING ====================
if uploaded_file and submit and question:
    try:
        df = pd.read_csv(uploaded_file)

        # Example visualizations based on keyword matching
        if "gender" in question.lower() and "title" in question.lower():
            fig, ax = plt.subplots(figsize=(10, 5))
            sns.countplot(data=df, x='title', hue='gender', palette='pastel', ax=ax)
            ax.set_title("Gender Distribution Across Job Titles", fontsize=14)
            ax.set_xlabel("Job Title")
            ax.set_ylabel("Count")
            plt.xticks(rotation=45)
            st.pyplot(fig)
            st.markdown("<div class='chart-explanation'>يوضح هذا الرسم التوزيع بين الجنسين في كل مسمّى وظيفي.</div>", unsafe_allow_html=True)

        elif "tenure" in question.lower() or "average years" in question.lower():
            if "department" in df.columns and "tenure" in df.columns:
                avg_tenure = df.groupby("department")["tenure"].mean().sort_values()
                fig, ax = plt.subplots(figsize=(10, 5))
                avg_tenure.plot(kind='barh', color='#0f4c81', ax=ax)
                ax.set_title("Average Tenure per Department")
                ax.set_xlabel("Years")
                st.pyplot(fig)
                st.markdown("<div class='chart-explanation'>يوضح هذا الرسم عدد سنوات العمل في كل قسم كمعدل.</div>", unsafe_allow_html=True)

        elif "promotion" in question.lower() and "years" in question.lower():
            if "last_promotion_years" in df.columns:
                fig, ax = plt.subplots()
                sns.histplot(df["last_promotion_years"], bins=10, kde=True, color="#0f4c81", ax=ax)
                ax.set_title("Years Since Last Promotion")
                ax.set_xlabel("Years")
                ax.set_ylabel("Count")
                st.pyplot(fig)
                st.markdown("<div class='chart-explanation'>يوضح هذا الرسم عدد السنوات منذ آخر ترقية لكل موظف.</div>", unsafe_allow_html=True)

        elif "salary" in question.lower() and "gender" in question.lower():
            if "salary" in df.columns and "gender" in df.columns:
                fig, ax = plt.subplots(figsize=(6, 4))
                sns.boxplot(data=df, x="gender", y="salary", palette="Set2", ax=ax)
                ax.set_title("Salary Distribution by Gender")
                st.pyplot(fig)
                st.markdown("<div class='chart-explanation'>يوضح هذا الرسم الفروقات في المرتبات بين الذكور والإناث.</div>", unsafe_allow_html=True)

        elif "turnover" in question.lower() or "attrition" in question.lower():
            if "department" in df.columns and "attrition" in df.columns:
                dept_attr = df[df["attrition"] == "Yes"]["department"].value_counts()
                fig, ax = plt.subplots()
                dept_attr.plot(kind='bar', color='#ff6f61', ax=ax)
                ax.set_title("Departments with Highest Turnover")
                ax.set_ylabel("Attritions")
                st.pyplot(fig)
                st.markdown("<div class='chart-explanation'>يوضح هذا الرسم عدد الاستقالات في كل قسم.</div>", unsafe_allow_html=True)

        else:
            st.warning("❌ Sorry, I can't answer that question. This data is restricted or unsupported.")

        # Optional download
        if 'fig' in locals():
            buf = io.BytesIO()
            fig.savefig(buf, format="png")
            st.download_button("📥 Download Chart", buf.getvalue(), "chart.png", "image/png")

    except Exception as e:
        st.error(f"Error loading file: {e}")
